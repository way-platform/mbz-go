// Package vehiclesv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package vehiclesv1

// Defines values for EudaDesiredServiceStatusDesiredStatus.
const (
	EudaDesiredServiceStatusDesiredStatusACTIVE   EudaDesiredServiceStatusDesiredStatus = "ACTIVE"
	EudaDesiredServiceStatusDesiredStatusINACTIVE EudaDesiredServiceStatusDesiredStatus = "INACTIVE"
)

// Defines values for Status.
const (
	StatusACTIVATIONFAILED  Status = "ACTIVATION_FAILED"
	StatusACTIVATIONPENDING Status = "ACTIVATION_PENDING"
	StatusACTIVE            Status = "ACTIVE"
	StatusEXPIRED           Status = "EXPIRED"
	StatusINACTIVE          Status = "INACTIVE"
	StatusNOTAVAILABLE      Status = "NOT_AVAILABLE"
)

// ActualServiceStatus defines model for ActualServiceStatus.
type ActualServiceStatus struct {
	// CountryCode Country code of the service that should be updated, defaults to GLOBAL.
	CountryCode string `json:"countryCode"`

	// ServiceID ID of the generic-service
	ServiceID string `json:"serviceId"`

	// Status Status of a service
	Status Status `json:"status"`
}

// ActualServiceStatusForVehicle defines model for ActualServiceStatusForVehicle.
type ActualServiceStatusForVehicle struct {
	// CustomerID The clientId.
	CustomerID string `json:"customerId"`

	// Services List services for which you want to change the actual service status.
	Services []ActualServiceStatus `json:"services"`

	// VIN The VIN (vehicle identification number) of the vehicle
	VIN string `json:"vin"`
}

// ActualServiceStatusRequest defines model for ActualServiceStatusRequest.
type ActualServiceStatusRequest struct {
	// ActualServiceStatusForVehicle List of objects containing information which service-status should be changed on a specific vehicle.
	ActualServiceStatusForVehicle []ActualServiceStatusForVehicle `json:"actualServiceStatusForVehicle"`
}

// BadRequestErrorResponse defines model for BadRequestErrorResponse.
type BadRequestErrorResponse struct {
	Detail string `json:"detail,omitempty"`

	// Instance URI where this error occurred
	Instance   string `json:"instance,omitempty"`
	StatusCode *int32 `json:"statusCode,omitempty"`
	Title      string `json:"title,omitempty"`

	// Type URI-reference for type information or 'about:blank' if no more information is available
	Type string `json:"type,omitempty"`
}

// BadRequestErrorResponsePublic defines model for BadRequestErrorResponse_Public.
type BadRequestErrorResponsePublic struct {
	Detail string `json:"detail,omitempty"`

	// Instance URI where this error occurred
	Instance   string `json:"instance,omitempty"`
	StatusCode *int32 `json:"statusCode,omitempty"`
	Title      string `json:"title,omitempty"`

	// Type URI-reference for type information or 'about:blank' if no more information is available
	Type string `json:"type,omitempty"`
}

// BadRequestWithPositionErrorResponse This error occurs, if a validation (eg. of an argument) failed
type BadRequestWithPositionErrorResponse struct {
	// Detail details why the request is Bad
	Detail string `json:"detail"`

	// Instance URI where this error occurred
	Instance   string    `json:"instance,omitempty"`
	OccurredAt *Position `json:"occurredAt,omitempty"`
	StatusCode *int32    `json:"statusCode,omitempty"`
	Title      string    `json:"title,omitempty"`
	Type       string    `json:"type,omitempty"`
}

// CleanupNotAvailableServicesRequest defines model for CleanupNotAvailableServicesRequest.
type CleanupNotAvailableServicesRequest struct {
	// CleanupThreshold Threshold in minutes, specifying the age lower bound for services to be deactivated.
	CleanupThreshold int32 `json:"cleanup_threshold"`
}

// CompatibilityGenericService defines model for CompatibilityGenericService.
type CompatibilityGenericService struct {
	// Available The service availability
	Available bool `json:"available"`

	// ServiceID The ID of the service
	ServiceID string `json:"serviceId"`

	// ServiceName The name of the service
	ServiceName string `json:"serviceName"`
}

// CompatibilityResponse defines model for CompatibilityResponse.
type CompatibilityResponse struct {
	// Services List of services with the service availability.
	Services []CompatibilityGenericService `json:"services"`

	// VehicleProvidesConnectivity This property indicates the base compatibility to data-services for the requested vehicle.
	VehicleProvidesConnectivity bool `json:"vehicleProvidesConnectivity"`

	// VehicleType The type of the requested vehicle.
	VehicleType string `json:"vehicleType,omitempty"`

	// VIN The VIN (vehicle identification number) of the requested vehicle.
	VIN string `json:"vin"`
}

// DesiredServiceStatus defines model for DesiredServiceStatus.
type DesiredServiceStatus struct {
	// DesiredStatus Status of a service
	DesiredStatus Status `json:"desiredStatus"`

	// ServiceID ID of the generic-service
	ServiceID string `json:"serviceId"`
}

// DesiredServiceStatusRequest defines model for DesiredServiceStatusRequest.
type DesiredServiceStatusRequest struct {
	// Services List of services for which you want to change the desired service status.
	Services []DesiredServiceStatus `json:"services"`

	// VIN VIN of the vehicle
	VIN string `json:"vin"`
}

// DesiredServiceStatusRequestPublic defines model for DesiredServiceStatusRequest_Public.
type DesiredServiceStatusRequestPublic struct {
	// Services List of services for which you want to change the desired service status.
	Services []DesiredServiceStatus `json:"services"`

	// VIN VIN of the vehicle
	VIN string `json:"vin"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Detail details why this error occurred.
	Detail string `json:"detail,omitempty"`

	// Instance URI where this error occurred
	Instance string `json:"instance,omitempty"`

	// StatusCode status code of this error (e.g. http status code)
	StatusCode *int32 `json:"statusCode,omitempty"`

	// Title title of this error (e.g. http status reason phrase)
	Title string `json:"title,omitempty"`

	// Type URI-reference for type information or 'about:blank' if no more information is available
	Type string `json:"type,omitempty"`
}

// EudaDesiredServiceStatus defines model for EudaDesiredServiceStatus.
type EudaDesiredServiceStatus struct {
	// DesiredStatus The desired service status
	DesiredStatus EudaDesiredServiceStatusDesiredStatus `json:"desiredStatus"`

	// ServiceID ID of the data act service
	ServiceID string `json:"serviceId"`
}

// EudaDesiredServiceStatusDesiredStatus The desired service status
type EudaDesiredServiceStatusDesiredStatus string

// EudaDesiredServiceStatusRequestPublic defines model for EudaDesiredServiceStatusRequest_Public.
type EudaDesiredServiceStatusRequestPublic struct {
	// ConsentToken Consent token
	ConsentToken string `json:"consentToken"`

	// Services List of services for which you want to change the desired service status.
	Services []EudaDesiredServiceStatus `json:"services"`

	// Vins List of VINs of vehicles
	Vins []string `json:"vins"`
}

// GenericService defines model for GenericService.
type GenericService struct {
	// ApprovalTimestamp Time when this service was initial activated
	ApprovalTimestamp int64 `json:"approvalTimestamp"`

	// CountryCode Code denoting potential regional customizations. GLOBAL is the base code with no customizations, any other code means the corresponding country differs from the base definition.
	CountryCode string `json:"countryCode"`

	// DeltaPush Flag denoting whether delta push signals are sent for this VIN.
	DeltaPush bool `json:"deltaPush"`

	// DesiredStatus Status of a service
	DesiredStatus Status `json:"desiredStatus"`

	// OrderID The ID of the order
	OrderID string `json:"orderId,omitempty"`

	// OriginalDesiredActivationTimestamp Time when this service was ordered by the customer
	OriginalDesiredActivationTimestamp int64 `json:"originalDesiredActivationTimestamp"`

	// ServiceID The ID of the generic-service
	ServiceID string `json:"serviceId"`

	// Status Status of a service
	Status Status `json:"status"`
}

// GenericServiceListResponse defines model for GenericServiceListResponse.
type GenericServiceListResponse struct {
	// ServiceList List of service states per virtual-vehicle
	ServiceList []ServiceList `json:"serviceList"`
}

// NotFoundErrorResponse defines model for NotFoundErrorResponse.
type NotFoundErrorResponse struct {
	Detail string `json:"detail,omitempty"`

	// Instance URI where this error occurred
	Instance   string `json:"instance,omitempty"`
	StatusCode *int32 `json:"statusCode,omitempty"`
	Title      string `json:"title,omitempty"`

	// Type URI-reference for type information or 'about:blank' if no more information is available
	Type string `json:"type,omitempty"`
}

// NotFoundErrorResponsePublic defines model for NotFoundErrorResponse_Public.
type NotFoundErrorResponsePublic struct {
	Detail string `json:"detail,omitempty"`

	// Instance URI where this error occurred
	Instance   string `json:"instance,omitempty"`
	StatusCode *int32 `json:"statusCode,omitempty"`
	Title      string `json:"title,omitempty"`

	// Type URI-reference for type information or 'about:blank' if no more information is available
	Type string `json:"type,omitempty"`
}

// Position defines model for Position.
type Position struct {
	Column int32 `json:"column"`
	Line   int32 `json:"line"`
}

// ServiceLicenseStatusResponse defines model for ServiceLicenseStatusResponse.
type ServiceLicenseStatusResponse struct {
	// ServiceID The generic service id for which the license was created.
	ServiceID string `json:"serviceId"`

	// Status Status of a service
	Status Status `json:"status"`

	// ValidFrom Start of the validity period (Epoch Milliseconds). The time when the license became ACTIVE.
	ValidFrom *int64 `json:"validFrom,omitempty"`

	// ValidTo End of the validity period (Epoch Milliseconds). The time when the license becomes or became EXPIRED. This field will not appear for licenses with unlimited validity.
	ValidTo *int64 `json:"validTo,omitempty"`

	// VIN The VIN of the vehicle to which the license belongs to.
	VIN string `json:"vin"`
}

// ServiceList defines model for ServiceList.
type ServiceList struct {
	// CustomerID clientId
	CustomerID string `json:"customerId"`

	// Services List of generic-services with the service status.
	Services []GenericService `json:"services"`

	// VIN The VIN (vehicle identification number) of the vehicle
	VIN string `json:"vin"`
}

// ServiceStatus defines model for ServiceStatus.
type ServiceStatus struct {
	// DesiredStatus Status of a service
	DesiredStatus Status `json:"desiredStatus,omitempty"`

	// OrderTime Time when this service was ordered by client
	OrderTime int64 `json:"orderTime"`

	// ServiceID ID of the generic-service
	ServiceID string `json:"serviceId"`

	// Status Status of a service
	Status Status `json:"status"`
}

// Status Status of a service
type Status string

// TooManyObjectsToProcess defines model for TooManyObjectsToProcess.
type TooManyObjectsToProcess struct {
	Detail string `json:"detail"`

	// Instance URI where this error occurred
	Instance   string `json:"instance,omitempty"`
	StatusCode *int32 `json:"statusCode,omitempty"`
	Title      string `json:"title"`
	Type       string `json:"type,omitempty"`
}

// ValidationError details why the validation failed. An additional property `rejectedValue` might indicate which specific value did not pass validation.
type ValidationError struct {
	// Field name of field, which did not pass validation
	Field string `json:"field"`

	// Message concrete reason, why validation failed
	Message string `json:"message"`
}

// ValidationErrorResponse This error occurs, if a validation (eg. of an argument) failed
type ValidationErrorResponse struct {
	// Detail information, about what kind of validation failed
	Detail string `json:"detail"`

	// Instance URI where this error occurred
	Instance         string            `json:"instance,omitempty"`
	StatusCode       *int32            `json:"statusCode,omitempty"`
	Title            string            `json:"title,omitempty"`
	Type             string            `json:"type,omitempty"`
	ValidationErrors []ValidationError `json:"validationErrors"`
}

// Vehicle defines model for Vehicle.
type Vehicle struct {
	// DeltaPush Flag denoting whether delta push signals are sent for this VIN.
	DeltaPush *bool `json:"deltaPush,omitempty"`

	// VIN The VIN (vehicle identification number) of the vehicle
	VIN string `json:"vin"`
}

// VehicleDeltaPushPatchRequest defines model for VehicleDeltaPushPatchRequest.
type VehicleDeltaPushPatchRequest struct {
	// DeltaPush Flag denoting whether delta push signals are sent for this VIN.
	DeltaPush bool `json:"deltaPush"`

	// VIN The VIN (vehicle identification number) of the vehicle
	VIN string `json:"vin"`
}

// VehicleOwnerDesiredServiceStatus defines model for VehicleOwnerDesiredServiceStatus.
type VehicleOwnerDesiredServiceStatus struct {
	// DesiredStatus Status of a service
	DesiredStatus Status `json:"desiredStatus"`

	// ServiceID ID of the generic-service
	ServiceID string `json:"serviceId"`
}

// VehicleOwnerDesiredServiceStatusRequest defines model for VehicleOwnerDesiredServiceStatusRequest.
type VehicleOwnerDesiredServiceStatusRequest struct {
	// ConsentToken Consent token
	ConsentToken string `json:"consentToken"`

	// Services List of services for which you want to change the desired service status.
	Services []VehicleOwnerDesiredServiceStatus `json:"services"`
}

// VehicleOwnerDesiredServiceStatusResponse defines model for VehicleOwnerDesiredServiceStatusResponse.
type VehicleOwnerDesiredServiceStatusResponse struct {
	TokenExpirationTimeMillis int64 `json:"tokenExpirationTimeMillis"`
}

// VehicleOwnerDesiredServiceStatusResponsePublic defines model for VehicleOwnerDesiredServiceStatusResponse_Public.
type VehicleOwnerDesiredServiceStatusResponsePublic struct {
	TokenExpirationTimeMillis int64 `json:"tokenExpirationTimeMillis"`
}

// VehicleServiceStatus defines model for VehicleServiceStatus.
type VehicleServiceStatus struct {
	// DeltaPush Flag denoting whether delta push signals are sent for this VIN.
	DeltaPush bool `json:"deltaPush"`

	// Services List services for which you want to change the actual service status.
	Services []ServiceStatus `json:"services"`

	// VIN The VIN (vehicle identification number) of the vehicle
	VIN string `json:"vin"`
}

// VirtualVehicle defines model for VirtualVehicle.
type VirtualVehicle struct {
	ClientID string `json:"clientId"`
	VIN      string `json:"vin"`
}

// VirtualVehiclesPage defines model for VirtualVehiclesPage.
type VirtualVehiclesPage struct {
	// IsLast Indicates if this is the last page with elements
	IsLast bool `json:"isLast"`

	// TotalElements Total number of VirtualVehicles stored in the database
	TotalElements int64 `json:"totalElements"`

	// Vehicles VirtualVehicles within this page
	Vehicles []VirtualVehicle `json:"vehicles"`
}
